#
# Description: Build OpenWrt using GitHub Actions
#

name: OpenWrt X86 Im

on:
  repository_dispatch:
 
env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  FEEDS_CONF: x86/diy/x86_lede/master.feeds.conf.default
  CONFIG_FILE: immortalwrt/config.imm
  DIY_P1_SH: immortalwrt/diy-part1.sh
  DIY_P2_SH: immortalwrt/diy-part3.sh
  CLASH_KERNEL: amd64
  UPLOAD_BIN_DIR: false
  UPLOAD_CONFIG: false
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  FILE_NAME: x86_64
  PRODUCT_NAME: x86_64
 
jobs:
  Build:
    runs-on: ubuntu-22.04

    steps:
    - name: Show system
      run: |
        echo -e "Total CPU cores\t: $(nproc)"
        cat /proc/cpuinfo | grep 'model name' 

    - name: Check server configuration
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号(降序): 7763，8370C，8272CL，8171M，E5-2673 \n"
        echo -e "-------------- ------------CPU信息------------------------------------------"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo "CPU线程数量: $(nproc)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "-------------------------------内存信息-------------------------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "-----------------------------硬盘信息---------------------------------------------"
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)"
        echo "硬盘详情："
        echo "系统空间        类型   总数  已用  可用  使用率"
        df -Th
        
    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E swapoff -a
        sudo -E rm -f /swapfile
        sudo -E snap set system refresh.retain=2
        sudo -E rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        [ -n "$AGENT_TOOLSDIRECTORY" ] && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo -E apt-get update
        sudo -E apt-get -y install $(cat $GITHUB_WORKSPACE/depends-ubuntu-2204)
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
        sudo rm -rf ~/{.cargo,.dotnet,.rustup}
        sudo timedatectl set-timezone "$TZ"
        df -Th
        
    - name: Create VG & LV
      run: |
        mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
        root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
        sudo truncate -s "$mnt_size"G /mnt/mnt.img
        sudo truncate -s "$root_size"G /root.img
        sudo losetup /dev/loop6 /mnt/mnt.img
        sudo losetup /dev/loop7 /root.img
        sudo pvcreate /dev/loop6
        sudo pvcreate /dev/loop7
        sudo vgcreate github /dev/loop6 /dev/loop7
        sudo lvcreate -n runner -l 100%FREE github
        sudo mkfs.xfs /dev/github/runner
        
    - name: Mount LV
      run: |
        sudo mkdir -p /builder
        sudo mount /dev/github/runner /builder
        sudo chown -R runner.runner /builder
        df -Th
        
    - name: Clone source code
      working-directory: /builder
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /builder/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        Author=$(git show -s --date=short --format="%an")
        Date=$(git show -s --date=short --format="%ci")
        Commit=$(git show -s --date=short --format="%s")
        Hash=$(git show -s --date=short --format="%H")
        echo "author=$Author" >> $GITHUB_ENV
        echo "date=$Date" >> $GITHUB_ENV
        echo "commit=$Commit" >> $GITHUB_ENV
        echo "hash=$Hash" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "TAG=$(date "+%Y%m%d")" >> $GITHUB_ENV
        echo "start=$(date +%s)" >> $GITHUB_ENV
        
    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH
        
    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $GITHUB_WORKSPACE/diy_script/*.sh
        chmod +x $DIY_P2_SH
        cd openwrt
 
    - name: Output compilation information
      run: |
        cd openwrt
        echo "系统空间        类型  总数  已用  可用  使用率"
        df -hT $PWD
        echo
        echo "=========================================="
        grep -i CONFIG_PACKAGE_luci-app .config | grep  -v \# > Plug-in
        grep -i CONFIG_PACKAGE_luci-theme .config | grep  -v \# >> Plug-in
        sed -i '/INCLUDE/d' Plug-in > /dev/null 2>&1
        sed -i 's/CONFIG_PACKAGE_/、/g' Plug-in
        sed -i '/Transparent_Proxy/d' Plug-in > /dev/null 2>&1
        sed -i 's/=y/\ /g' Plug-in
        awk '$0=NR$0' Plug-in > Plug-2
        awk '{print "	" $0}' Plug-2 > Plug-in
        echo
        echo
        echo "	      已选插件列表"
        cat Plug-in
        rm -rf {Plug-in,Plug-2}
        echo
        echo "=========================================="
        echo
        echo
        echo "输出完整插件信息..."
        echo
        echo
        cat .config
        
    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        if [[ "${CANCEL_TOOLCHAIN}" == "true" ]]; then
           echo -e "\e[1;31m当前正常编译...\e[0m"
           make download -j$(nproc)
        else
           echo -e "\e[1;31m当前使用toolchain缓存文件...\e[0m"
           make package/download -j$(nproc)
        fi
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        
    - name: Check space usage
      run: |
        echo "=========================================="
        echo "----------------空间使用-------------------"
        echo "=========================================="
        echo "系统空间       类型   总数  已用  可用 使用率"
        df -hT
        echo "=========================================="
        du -h --max-depth=1 openwrt/ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 openwrt/build_dir
        du -h --max-depth=1 openwrt/bin
        
    - name: Organize firmware files
      id: organizer
      run: |
        mkdir -p ./artifact/buildinfo
        cp -rf openwrt/.config ./artifact/buildinfo/x86.config
        cp -rf $(find openwrt/bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
        
    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: env.UPLOAD_BIN_DIR == 'true' && steps.compile.outputs.status == 'success'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: Upload config
      uses: actions/upload-artifact@main
      if: env.UPLOAD_CONFIG == 'true' && steps.compile.outputs.status == 'success'
      with:
        name: x86-config
        path: ./artifact/buildinfo/

    - name: Delete files
      run: |
        cd openwrt 
        bash  rename.sh
        Kernel=$(ls bin/targets/x86/64 | grep "_uefi.img.gz" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')
        echo "KERNEL=$Kernel" >> $GITHUB_ENV
        
    - name: Organize files
      id: organize
      if: steps.compile.outputs.status == 'success'
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        
    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: env.UPLOAD_FIRMWARE == 'true' && steps.organize.outputs.status == 'success'
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Create release
      id: release
      uses: ncipollo/release-action@v1
      if: env.UPLOAD_RELEASE == 'true' && steps.compile.outputs.status == 'success'
      with:
        name: ${{ env.DATE }} 「 ${{ env.FILE_NAME }}_${{ env.KERNEL }} 」[ImmortalWrt]固件
        allowUpdates: true
        removeArtifacts: true
        tag: ${{ env.TAG }}_immo_${{ env.KERNEL }}
        token: ${{ secrets.GH_TOKEN }}
        body: |
          **This is ImmortalWrt Firmware for ${{ env.FILE_NAME }}**
          ### 📒 固件信息
          - 💻 平台架构: ${{ env.FILE_NAME }}
          - ⚽ 固件源码: ${{ env.REPO_URL }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🚀 内核版本: ${{ env.KERNEL }}
          - 🌐 默认地址：192.168.8.3
          - 🔑 默认密码：无密码
          ### 🧊 固件版本
          - 当前使用版本:【编译前的最后一次[➦主源码](https://github.com/immortalwrt/immortalwrt)更新记录】
          - ★ 感谢源码作者无私分享！
          - 🎈🎈🎈 更新信息 🎈🎈🎈
          - 作者: ${{ env.author }}
          - 时间: ${{ env.date }} 
          - 内容: ${{ env.commit }}        
          - hash: ${{ env.hash }}
        artifacts: ${{ env.FIRMWARE }}/*
